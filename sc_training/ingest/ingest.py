# AUTOGENERATED! DO NOT EDIT! File to edit: 07_ingest.ipynb (unless otherwise specified).

__all__ = ['inventory_replays', 'get_replay_indicators']

# Internal Cell

import re
import pymongo
import json
import sc2reader
import errno
import jsonschema
import os

import pandas as pd


from typing import *
from pathlib import Path
from pprint import pprint
from jsonschema import validate
from dataclasses import dataclass, astuple, asdict, field

from . import *

sc2reader.engine.register_plugin(CtrlGroupTracker())

# Internal Cell
@dataclass
class Config_settings:
    port_address: str
    port_number: int
    db_name: str
    replay_path: str

    def __str__(self):
        headers = ["Port Address: ","Port Number: ",
                  "DB Name: ","Replays file: "]
        strings = [f'{h:<15}{att:>40}\n' for h, att
                   in zip(headers, astuple(self))]
        return ''.join(strings)

Config_schema = {
    "type": "object",
    "properties":{
        "DB_NAME": {"type":"string"},
        "PORT_ADDRESS":  {"type":"string"},
        "PORT_NUMBER": {"type":"number"},
        "REPLAY_PATH": {"type":"string"}
    }
}

def validate_config_file(file: Path, schema: Dict[str, Any]) -> bool:
    try:
        validate(file, schema)
    except jsonschema.exceptions.ValidationError as err:
        print(err)
        print("config.json does not conform to the required specifications")
        raise err
    except jsonschema.exceptions.SchemaError as err:
        print(err)
        print("The Config_schema is invalid")
        raise err

    return True

def open_config_file(config_file: Path) -> dict[str, Any]:
    try:
        if not config_file.exists():
            raise FileNotFoundError

        validate_config_file(json.load(config_file.open()), Config_schema)

        with config_file.open('r') as cf:
            return json.load(cf)

    except FileNotFoundError as err:
        print('config.json not found')
        raise err


# Internal Cell
def load_configurations() -> Config_settings:
    """Loads the project's
    """

    config_file = (Path(Path.cwd()/'data/config.json')
               if Path(Path.cwd()/'data/config.json').exists()
               else Path(Path(__file__)/'../../../data/config.json'))

    config_dict = open_config_file(config_file)
    return Config_settings(
        config_dict['PORT_ADDRESS'],
        config_dict['PORT_NUMBER'],
        config_dict['DB_NAME'],
        config_dict['REPLAY_PATH']
    )

# Cell
def inventory_replays():
    pass



# Cell
def get_replay_indicators():
    pass