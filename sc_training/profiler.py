# AUTOGENERATED! DO NOT EDIT! File to edit: 08_profiler.ipynb (unless otherwise specified).

__all__ = ['build_player_race_profiles']

# Internal Cell
import sc2reader

import pandas as pd
import numpy as np
import re
import pymongo

from typing import *

from .ingest import *

sc2reader.engine.register_plugin(CtrlGroupTracker())

# Internal Cell
def get_top_of_category(column: pd.Series) -> str:

    return column.value_counts().reset_index().iloc[0]['index']


# Internal Cell

def get_user_name_list(active_db: pymongo.database.Database) -> list:
    # Define username patters to ignore
    ai_pat = re.compile(r'^A\.I\. [\d] [(][\w\s]*[)]$')
    barcode_pat = re.compile(r'^l+$')

    # Iterate through the records in the `replays` collection to get all valid
    # user names.
    players_match_count = dict()
    for rec in active_db['replays'].find():
        for player in rec['players']:
            if not (ai_pat.findall(player['username'])
                    or barcode_pat.findall(player['username'])
                    or player['username'] == 'Player 2'):
                players_match_count.setdefault(player['username'], 0)
                players_match_count[player['username']] += 1

    return [name
            for name , count
            in players_match_count.items()
            if count >= 5]

# Internal Cell
def get_player_replays(username: str, race: str) -> list:

    player_1_protoss = [rpl['replay_name'] for rpl
                        in working_db['replays'].
                        find({'players.0.username':username,
                              'players.0.race':race},
                             {'replay_name':1, 'players':1})]

    # Based on the list query `indicators` to get the performance scores of
    # Player 1 in each replay of the previous list.
    working_repls = {}
    for rpl in player_1_protoss:
        for cur in working_db['indicators'].find({'replay_name':rpl,
                                                'player_id': 1},
                                                {'_id':0, 'replay_name':0,
                                                'player_username':0,
                                                'player_id': 0}):
            working_repls[rpl] = cur

    layer_2_protoss = [rpl['replay_name'] for rpl
                       in working_db['replays'].
                       find({'players.1.username':username,
                             'players.1.race':race},
                            {'replay_name':1, 'players':1})]

    for rpl in player_2_protoss:
        for cur in working_db['indicators'].find({'replay_name':rpl,
                                                'player_id': 2},
                                                {'_id':0, 'replay_name':0,
                                                'player_username':0,
                                                'player_id': 0}):
            working_repls[rpl] = cur



    return working_repls

# Internal Cell
def build_profile(replays_df: pd.DataFrame,
                  username:str,
                  race: str) -> pd.DataFrame:


    categorical_columns = replays_df.dtypes[replays_df.dtypes == object]
    cat_features = replays_df[[x for x in categorical_columns.index]]
    cate_profile = cat_features.apply(get_top_of_category, axis=0)

    non_cat_columns = replays_df.dtypes[replays_df.dtypes != object]
    non_cat_features = replays_df[[x for x in non_cat_columns.index]]
    non_cate_profile = non_cat_features.mean()


    profile_name = 'player_profile'
    left = pd.DataFrame(non_cate_profile.to_dict(), index=[0])
    left.insert(0, profile_name, f'{username}_{race}')
    right = pd.DataFrame(cate_profile.to_dict(), index=[0])
    right.insert(0, profile_name, f'{username}_{race}')

    return left.merge(right, how='inner', on=profile_name)

# Cell

def build_player_race_profiles() -> None:
    """Converts all replays in the project's database, defined in the
    project's config.json file, into a set of player profiles stored in
    that same database in the 'Protoss_Profiles', 'Terran_Profiles',
    and 'Zerg_Profiles' collections.
    """
    races = ['Protoss', 'Terran', 'Zerg']
    active_db = set_up_db()
    for race in races:
        active_db[f'{race}_Profiles'].drop()


    user_name_list = get_user_name_list(active_db)


    for user_name in get_user_name_list(active_db):
        for race in races:
            replays = get_player_replays(user_name, race)

            active_replays_df = (pd.DataFrame(working_repls.values(),
                                              index=working_repls.keys())
                                              .reset_index()
                                              .drop('index', axis=1))

            act_prf = build_profile(active_replays_df, user_name, race)
            act_prf_dict_lists = act_prf.to_dict(orient='list')
            final_act_prf_dict = ({k: v[0]
                                   for k, v
                                   in act_prf_dict_lists.items()})

            active_db[f'{race}_Profiles'].insert_one(final_act_prf_dict)
