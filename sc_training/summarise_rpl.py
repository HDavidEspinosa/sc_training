# AUTOGENERATED! DO NOT EDIT! File to edit: 01_summarise_rpl.ipynb (unless otherwise specified).

__all__ = ['Player_data', 'Replay_data', 'get_players', 'get_replay_info']

# Internal Cell

# This are summarise_rpl's dependencies.

from pathlib import Path
from pprint import pprint
from dataclasses import dataclass, astuple, field
from datetime import datetime
from typing import *

import sc2reader


# Cell
@dataclass(frozen=True)
class Player_data:
    """
    Immutable dataclass that contains Information that describes a
    player's attributes in a match.

    *Attributes:*
        - player_number (int):
            Player number in the match. In a 1v1, match there would be a
            Player 1 and 2.
        - username (str):
            The player's user name.
        - race (str):
            The game race (Protoss, Terran, Zerg) with which the player
            played this match.
        - result (str):
            Variable descriving whether the player was the matches winner
            ('Win') or loser ('Loss').

    """
    player_number: int
    username: str
    race: str
    result: str

    def __str__(self):
        headers = ('Player Number:', 'User Name:', 'Race:', 'Result:')
        print_lines = (f'{h:<15}{att:>10}\n' for h, att
                        in zip(headers, astuple(self)))
        return ''.join(print_lines)




# Cell
@dataclass(frozen=True)
class Replay_data:
    """
    Immutable dataclass that contains information summarising a
    match's main attributes.

    *Attributes:*
        - replay_name (str):
            Absolute path of where the Replay was stored when uploaded.
        - replay_id (str):
            Name of the SC2Replay file.
        - date_time (datetime):
            Date and time when the match was played and recorded.
        - game_length (int):
            Length of the match in seconds.
        - match_type (str):
            Descrives the team configuration of the match (eg '1v1', '2v2').
        - game_release (str):
            Version and patch number for the game release where the match
            played.
        - map_name (str):
            Name of the match's map.
        - category (str):
            Descrives if the match was 'Ladder' or other type of match.
        - winner (str):
            User name of the match's winner
        - players (list):
            Summarised information of the match's players (see Player_data
            class).
    """
    replay_name: str
    replay_id: str
    date_time: datetime
    game_length: int
    match_type: str
    game_release: str
    map_name: str
    category: str
    winner: str
    players: list[Player_data]

    def __str__(self):
        headers = ('File path:',
                   'File name:',
                   'Date (datetime.datetime):',
                   'Duration (seconds):',
                   'Game type:',
                   'Game release:',
                   'Map:',
                   'Game category:',
                   'winner:',
                   'players:'
                   )
        print_lines = (f'{h:<28} {str(att)} \n'
                       for h, att in zip(headers, astuple(self)))
        return ''.join(print_lines)



# Cell
def get_players(player_dict: Dict[Any, Any]) -> List[Player_data]:
    """
    Extracts the players' data from a Participant Object, into a
    Player_data instance.

    *Args:*
        - player_dict (Dict[int, sc2reader.objects.Participant]):
            Dictionary of the players in the match.

    *Returns:*
        - List[Player_data]:
            List of the match's players, each player contains a summary of
            their match data.
    """
    return [Player_data(p.pid, p.name, p.play_race, p.result)
            for p in player_dict.values()]


# Cell
def get_replay_info(replay: sc2reader.resources.Replay) -> Replay_data:
    '''
    Extracts a summary of a match's general information into a Replay_data
    dataclass instance.

    *Args:*
        - replay (sc2reader.resources.Replay):
            Replay object to be analysed.

    *Returns:*
        - Replay_data
            Summary of a matches main descriptive information.
    '''

    # Collect information about the match in a document.
    return Replay_data(
        replay_name= replay.filename,
        replay_id= Path(replay.filename).name,
        date_time= replay.date,
        game_length= replay.length.seconds,
        match_type= replay.game_type,
        game_release= replay.release_string,
        map_name= replay.map_name,
        category= replay.category,
        winner= replay.winner,
        players= get_players(replay.player) # note the use of the helper
                                            # function here
    )